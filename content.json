{"meta":{"title":"New Life","subtitle":null,"description":"Snape's new life-IT","author":"John Doe","url":"https://chensnape.github.io"},"pages":[],"posts":[{"title":"索引_javase","slug":"索引-javase","date":"2019-09-14T21:03:23.000Z","updated":"2019-09-14T13:14:33.017Z","comments":true,"path":"2019/09/15/索引-javase/","link":"","permalink":"https://chensnape.github.io/2019/09/15/索引-javase/","excerpt":"","text":"javase_day01计算机的体系结构、常用快捷键、常用的dos命令javase_day02变量和注释、数据类型javase_day03字符类型、运算符javase_day04分支结构、循环结构 if、switch-case、forjavase_day05循环结构、一维数组 while、breakjavase_day06二维数组、面向对象编程的概念javase_day07成员方法、构造方法和方法重载 Overridejavase_day08this关键字、方法的传参过程和递归调用、封装javase_day09static关键字、单例设计模式、继承javase_day10访问控制、final关键字、多态、抽象类javase_day11接口、匿名内部类、Object类* equals、hashCode、toStringjavase_day12包装类和数学处理类、String类、常量池javase_day13String类、StringBuilder类和Stringbuffer类* 日期相关的类、集合框架、Collection集合* SimpleDateFormat、Calenderjavase_day14List集合javase_day15泛型机制、Queue集合、Set集合、Map集合 itertor迭代器、for eachjavase_day16异常机制、File类、I/O流、finally、throw FileOutputStream类、FileInputStream类javase_day17IO流、线程、PrintStream类、BufferedReader类 ObjectOutputStream类、ObjectInputStream类 Thread、Runnablejavase_day18线程的常用方法、线程的同步机制、网络编程的常识、基于tcp协议的编程模型javase_day19基于tcp协议的编程模型、常用的设计原则、常用的设计模式 ServerSocketjavase_day20常用的设计模式、常用的查找算法、常用的排序算法、在线考试系统javase_day21兄弟连在线考试系统","categories":[],"tags":[],"keywords":[]},{"title":"21基于tcp的在线考试系统","slug":"21基于tcp的在线考试系统","date":"2019-09-14T21:02:23.000Z","updated":"2019-09-14T13:14:14.373Z","comments":true,"path":"2019/09/15/21基于tcp的在线考试系统/","link":"","permalink":"https://chensnape.github.io/2019/09/15/21基于tcp的在线考试系统/","excerpt":"","text":"在线考试系统2019/8/25 9:43:05 项目开发的目标(1)综合应用JavaSE阶段的所有内容。 (2)了解项目开发的基本架构。项目开发的流程需求分析文档 =&gt; 概要设计文档 =&gt; 详细设计文档 =&gt; 编码和测试 =&gt; 安装和调试 =&gt; 维护和升级项目的功能兄弟连在线考试系统的功能模块主要有： (1)学员系统 a.账户管理：登录、退出、修改密码、... b.考试管理：开始考试、提交试卷、显示成绩、... (2)管理员系统 a.学员管理：增加学员、删除学员、修改学员、查找学员、显示学员、... b.考题管理：增加考题、删除考题、修改考题、查找考题、显示考题、...项目的架构兄弟连在线考试系统采用C(Client)/S(Server)架构进行设计，主要分为以下三层： 客户端 - 主要用于提供字符界面让客户进行业务的选择； 服务器 - 主要用于根据客户的业务选择实现真正的业务处理； 数据库 - 主要用于进行数据内容的读写；项目的实现客户端和服务器之间采用基于TCP协议的编程模型进行通信。 其中客户端的输出流连接服务器的输入流； 其中客户端的输入流连接服务器的输出流； 客户端和服务器之间采用对象流进行通信，其中对象的类型用于代表具体的业务。 UserMessage tum = new UserMessage(&quot;check&quot;, -- 其中check就代表校验操作 new User(&quot;admin&quot;, &quot;123456a&quot;)); 当服务器处理完毕之后可以通过对象的类型向客户端发送处理的结果。 当校验成功时，可以将对象的类型改为&quot;success&quot;再发送给客户端 当校验失败时，可以将对象的类型改为&quot;fail&quot;再发送给客户端项目的编码流程(1)实现客户端的字符界面提供给客户选择，将客户端选择的业务发送给服务器； (2)服务器接收到选择的业务类型后通过访问数据库的方式实现业务功能的处理； (3)实现客户端接收服务器的处理结果并给出对应的提示；","categories":[],"tags":[],"keywords":[]},{"title":"20常用设计模式、基础算法","slug":"20常用设计模式、基础算法","date":"2019-09-14T21:01:53.000Z","updated":"2019-09-14T13:13:52.027Z","comments":true,"path":"2019/09/15/20常用设计模式、基础算法/","link":"","permalink":"https://chensnape.github.io/2019/09/15/20常用设计模式、基础算法/","excerpt":"","text":"常用的设计模式、常用的查找算法、常用的排序算法、在线考试系统2019/8/23 9:43:05 常用的设计模式(重点)(1)基本概念 设计模式就是一种反复使用、代码设计经验的总结，是一种用于固定场合的固定套路 (2)常用的设计模式 单例设计模式、模板设计模式、工厂方法模式、抽象工厂模式...常用的查找算法(重点)线性(顺序)查找算法二分(折半)查找算法常用的排序算法冒泡排序算法(重中之重)练习自定义PacketSender类实现Sender接口并重写send方法； 在SendFactory类中自定义静态方法负责创建PacketSender类型的对象并返回； 在SendFactoryTest类中进行测试；作业重点掌握常用设计模式和常用算法 学习选修内容switch-case结构以及学生信息管理系统 预习兄弟连在线考试系统的文档","categories":[],"tags":[],"keywords":[]},{"title":"19tcp编程模型、常用设计原则、模式","slug":"19tcp编程模型、常用设计原则、模式","date":"2019-09-14T21:01:25.000Z","updated":"2019-09-14T13:13:35.669Z","comments":true,"path":"2019/09/15/19tcp编程模型、常用设计原则、模式/","link":"","permalink":"https://chensnape.github.io/2019/09/15/19tcp编程模型、常用设计原则、模式/","excerpt":"","text":"基于tcp协议的编程模型、常用的设计原则、常用的设计模式2019/8/22 8:51:30 基于tcp协议的编程模型编程模型服务器： (1)创建ServerSocket类型的对象并提供端口号 (2)等待客户端连接请求，调用accept方法 (3)使用输入输出流进行通信 (4)关闭Socket并释放有关资源 客户端： (1)创建Socket类型的对象并提供服务器的通信地址和端口号； (2)使用输入输出流进行通信； (3)关闭Socket并释放有关资源 常用的设计原则(记住)软件开发的流程需求分析文档 =&gt; 概要设计文档 =&gt; 详细设计文档 =&gt; 编码和测试 =&gt; 安装和调试 =&gt; 维护和升级常用的设计原则开闭原则 - 对扩展开放，对修改关闭如： public class Person{ private String name; public Person(){ } … } public class SubPerson extends Person{ private int age; ... } 里氏代换原则 - 任何基类可以出现的地方，子类一定可以出现 - 建议多使用多态,屏蔽不同子类的差异性实现通用的编程 - 子类 is a 父类如： public static void draw(Shap s){ s.show(); } draw(new Circle(11,2,3)); draw(new Rect(1,2,3,4)); 依赖倒转原则 - 在以后的开发中尽量多依赖于抽象类和接口类而不是具体实现类 - 抽象类和接口对子类具有强制性和规范性 如： public abstract class Account{ public abstract double getLixi(); } public class FixedAccount extends Account{ @Override public double getLixi(){...} } 接口隔离原则 - 尽量多依赖于小接口而不是大接口，避免接口的污染如： public interface RunAnimal{ public abstract void run(); } public interface FlyAnimal{ public abstract void fly(); } public class Dog implements RunAnimal{} 迪米特法则(最少知道原则) - 一个实体尽量少与其它实体之间发生互相作用 - 高内聚，低耦合 - 所谓高内聚就是指一个实体应该有的所有功能都尽量聚焦于该实体的内部 - 所谓低耦合就是指一个实体应该尽量减少与其它实体之间的关联度 合成复用原则 - 尽量多使用合成/聚合的方式，而不是继承的方式如： public class A{ public void show(){…} } public class B extends A { - 继承的方式，不推荐 public void test(){ //希望调用show方法 show(); } } public class B { - 合成复用的方式，推荐 private A a; public B(A a){ this.a=a; } public void test(){ //希望调用show方法 show(); } }常用的设计模式(1)基本概念 设计模式是一套被反复使用、代码设计经验的总结，用于固定场合中的固定套路。 (2)常用设计模式(重点) 单例设计模式、模板设计模式、工厂方法模式作业(1)重点掌握基于tcp协议编程模型的代码。 (2)使用基于tcp协议的编程模型实现将UserMessage类型对象由客户端发送给服务器； 服务器接收到对象后判断用户对象信息是否为&quot;admin&quot;和&quot;123456&quot;，若是则将 UserMessage对象中的类型改为&quot;success&quot;，否则将类型改为&quot;fail&quot;并回发给客户端 客户端接收到服务器发来的对象后判断并给出提示。 其中UserMessage类的特征有：类型(字符串类型) 和 用户对象(User类型)。 其中User类的特征有：用户名、密码(字符串类型)。 如： UserMessage tum = new UserMessage(&quot;check&quot;, new User(&quot;admin&quot;, &quot;123456&quot;)); (3)预习在线考试系统的文档。","categories":[],"tags":[],"keywords":[]},{"title":"18线程、网络编程","slug":"18线程、网络编程","date":"2019-09-14T21:00:46.000Z","updated":"2019-09-14T13:13:17.154Z","comments":true,"path":"2019/09/15/18线程、网络编程/","link":"","permalink":"https://chensnape.github.io/2019/09/15/18线程、网络编程/","excerpt":"","text":"线程的常用方法、线程的同步机制、网络编程的常识、基于tcp协议的编程模型2019/8/21 14:03:36 线程的常用方法(重点)线程的同步机制(重点)基本概念当多个线程同时访问同一种共享资源时，可能会造成数据的覆盖等不一致性问题，此时就需要对多个线程 之间进行通信和协调，该机制就叫做线程的同步机制解决方案由程序结果可知：当两个线程同时对同一个账户取款时，导致最终的账户余额不合理 引发原因：第一个线程还没有取款结束第二个线程就已经开始取款 解决方案：让第一个线程取款结束后再让第二个线程开始取款 将线程的并发操作改为串行操作即可 注意事项：为了提高代码的并发效率，应该尽量减少锁定的范围实现方式在Java语言中提供了一种内置的锁机制来保证代码执行的原子性，需要使用synchronized关键字加以修饰死锁的概念线程一执行的代码： public void run(){ synchronized(a){ synchronized(b){ //持有对象锁a等待对象锁b … } } } 线程二执行的代码： public void run(){ synchronized(b){ synchronized(a){ //持有对象锁b等待对象锁a … } } } 注意： 在以后的开发中尽量不要使用同步代码块的嵌套结构来避免死锁的发生 网络编程的常识(理解)目前主流的网络通讯软件有：QQ、微信、微博、陌陌、阿里巴巴、钉钉、飞信、...七层网络模型为了数据传输的可靠性和安全性，ISO(国际标准委员会组织)将数据的传递从逻辑上划分为七层 应用层、表示层、会话层、传输层、网络层、数据连接层、物理层 当发送数据时，需要对发送的数据按照上述七层模型进行层层加包再发送出去； 当接受数据时，需要对接受的数据按照上述 七层相反的次序进行层层拆包贼显示IP地址如： 192.168.1.1 - 是绝大多数路由器的登陆地址，进行账户密码的设置以及MAC地址过滤 IP地址就是互联网的唯一地址标识，也就是通过IP地址可以定位到具体某一台设备 IP地址本质上是由32位二进制组成的整数，叫做IPv4，当然也有128位二进制组成的整数，叫做IPv6目前主流的还是IPv4。 日常生活中采用点分十进制表示法来进行IP地址的描述，也就是将每个字节的二进制转换为一个十进制整数，不同的 十进制整数之间使用小数点隔开端口号根据IP地址可以定位到具体设备，而根据端口号可以定位到设备中的进程 网络编程需要提供：IP地址 和 端口号 端口号本质上是由16位二进制组成的整数，表示的范围是：0~65535，其中0~1024之间的端口号通常被系统占用 因此以后的开发从1025开始使用。作业(1)重点掌握线程的常用方法和线程同步的代码。 (2)复习所有内容准备后天的阶段考试。","categories":[],"tags":[],"keywords":[]},{"title":"17IO流、线程","slug":"17IO流、线程","date":"2019-09-14T21:00:21.000Z","updated":"2019-09-14T13:13:05.982Z","comments":true,"path":"2019/09/15/17IO流、线程/","link":"","permalink":"https://chensnape.github.io/2019/09/15/17IO流、线程/","excerpt":"","text":"IO流、线程2019/8/20 9:30:30 IO流PrintStream类(重点)(1)基本概念 java.io.PrintStream类主要用于方便地打印各种数据内容并且自动刷新 (2)常用方法###BufferedReader类(重点) (1)基本概念 java.io.BufferedReader类主要用于读取单个字符、字符数组以及一行字符串 (2)常用方法ObjectOutputStream类(重点)(1)基本概念 java.io.ObjectOutputStream类只要用于将Java语言中的对象整体写入到输出流中 只能将支持 java.io.Serializable 接口的对象写入流中，也就是说被写入对象的数据类型必须实现该接口 类通过实现 java.io.Seria;izable 接口以启用其序列化功能 所谓序列化主要指将一个对象需要保持的所有相关信息有效组织成字节序列化的转换过程 (2)常用方法ObjectInputStream类(重点)(1)基本概念 java.io.ObjectInputStream类主要用于从输入流中将一个对象整体读取出来 (2)常用方法 经验分享： 当需要向文件中写入多个对象时，可以先将多个对象放入一个集合中，然后将集合这个整体看作 一个对象调用一次weiteObject方法整体写入文件，此时只需要调用一次readObject方法就 可以将整个集合读取出来线程(重点)基本概念程序 - 数据结构 + 算法，主要指存放在硬盘上的可执行文件 进程 - 主要指运行在内存中的可执行文件 目前主流的操作系统都支持多进程，是为了让操作系统同时执行多个任务，但进程是重量级的，新建进程对系统的资源消耗比较大，因此进程的数量比较局限 线程是进程内部的程序流，也就是说操作系统中支持多进程，而每个进程的内部又可以支持多个线程，并且线程是轻量级的，新建线程会共享所在进程的系统资源，因此主流的开发都采用多线程 多线程技术是采用时间片轮转法来保证线程的并发执行，所谓并发就是指宏观并行微观串行的机制 线程的创建(重中之重)(1)线程的创建方式 java.lang.Thread类主要用于描述线程，Java虚拟机允许应用程序执行多个线程 而线程的创建和启动方式如下： a.自定义类继承Thread类并重写run方法，然后创建该类的对象调用start方法； b.自定义类实现Runnable接口并重写run方法，然后创建该类的对象作为实参来构造Thread类 的对象，最后使用Thread类的对象调用start方法； (2)相关方法的解析 Thread() - 使用无参方式构造对象 Thread(String name) - 根据参数指定的名称来构造对象 Thread(Runnable target) - 根据参数指定的接口引用来构造对象 Thread(Runnable target, String name) - 根据参数指定的接口引用和名称构造对象 void run() - 若线程对象是采用Runnable对象构造的，调用run方法时最终调用 Runnable接口引用所指向的run方法，否则调用该方法啥也不做。 void start() - 用于启动线程，Java虚拟机会自动调用该线程的run方法。 (3)原理分析 a.执行main方法的线程叫做主线程，执行run方法的线程叫做子线程； b.main方法是程序的入口，对于start方法调用之前的代码来说由主线程执行一次 当start方法调用成功后线程的个数由1个变成了2个，新创建的线程去执行run方法的代码 主线程继续向下执行，两个线程各自独立运行互不影响； c.当run方法执行完毕后则子线程结束，当main方法执行完毕后主线程结束，两个线程 的先后执行次序没有明确的规定，由系统的调度算法决定； (4)两种方式的比较 a.使用继承Thread类的方式代码比较简单，但Java语言中支持单继承，若该类继承了 Thread类就无法继承其它类。 b.使用实现Runnable接口的方式代码比较复杂，但不影响该类继承其它类以及实现其 它接口，在以后的开发中推荐该方式。线程的编号和名称(会用即可)作业(1)重点掌握线程创建的两种方式和对象流的使用。 (2)不断地提示用户输入要发送的内容，若发送的内容是&quot;bye&quot;则聊天结束，否则将用户输入的内容写入到文件 c:/a.txt中。要求使用BufferedReader类来读取键盘的输入 System.in代表键盘输入要求使用 PrintStream类负责将数据写入文件 (3)编程创建两个线程，线程一负责打印1 ~ 100之间的所有奇数；其中线程二负责打印1 ~ 100之间的所有 偶数；在main方法启动上述两个线程同时执行,主线程等待两个线程终止； (4)编程实现Account类的封装，特征有：账户余额； 编程实现AccountTest类，在main方法中创建对象并传入1000元，最后打印余额","categories":[],"tags":[],"keywords":[]},{"title":"16异常机制、File类、IO流","slug":"16异常机制、File类、IO流","date":"2019-09-14T20:59:43.000Z","updated":"2019-09-14T13:12:50.263Z","comments":true,"path":"2019/09/15/16异常机制、File类、IO流/","link":"","permalink":"https://chensnape.github.io/2019/09/15/16异常机制、File类、IO流/","excerpt":"","text":"异常机制、File类、I/O流2019/8/19 9:30:15 异常机制基本概念异常就是&quot;不正常&quot;的含义，Java语言中体现为程序在运行阶段的错误 java.lang.Throwable类是所有错误(Error类)或异常(Exception类)的超类 其中Error类主要用于描述比较严重无法通过编码解决的错误，如：JVM挂了等 其中Exception类主要用于描述比较轻微可以通过编码解决的错误，如：0作为除数等异常分类java.lang.Exception类是所有异常的超类，具体分类如下： RuntimeException - 运行时异常，也叫做非检测性异常 IOException和其它异常 - 其它异常，也叫做检测性异常 - 所谓检测性异常主要指在编译阶段能够被编译器检测出来的异常 RuntimeException类的主要子类 ..... 注意: 当程序执行过程中发生异常却又没有手动处理时，该异常由Java虚拟机采用默认方式处理 而默认处理方式就是打印异常名称、异常原因、异常发生的位置并终止程序避免异常在以后的开发中尽量多使用if条件判断避免异常的发生异常的捕获(1)语法格式 try{ 编写可能发生异常的语句块； } catch(异常类型 变量名){ 编写针对该类异常进行处理的语句块； } ... finally{ 编写无论是否发生异常都应该执行的语句块； } (2)注意事项 a.当需要编写多个catch分支时，切记小类型异常放在大类型异常的前面； 懒人的写法： catch(Exception e) {...} b.finally中通常用于编写善后处理的代码，如：关闭已经打开的文件等 (3)执行流程 try{ a; b; - 可能发生异常的语句； c; }catch(){ d; }finally{ e; } 当程序执行过程中没有发生异常时的执行流程：a,b,c,e 当程序执行过程中发生异常时的执行流程：a,b,d,e异常的抛出(1)基本概念 在程序执行中发生了异常却又没法直接处理时，就可以直接将异常转移给该方法的调用者进行处理 该过程就叫做异常的抛出 (2)语法格式 访问权限 返回值类型 方法名称(形参列表) theows 异常类型1，异常类型2...{} 如： public void show() throws IOException{...} (3)方法重写的原则 a.要求方法名相同、参数列表相同以及返回值类型相同，从jdk1.5开始允许返回子类 b.要求访问权限不能变小，可以相同或者变大； c.要求不能抛出更大的异常(异常机制)； 注意： 子类重写的方法可以抛出和父类一样的异常、可以抛出更小的异常以及不抛出异常 但不可以抛出平级不一样或者更大的异常。自定义异常(1)基本概念 虽然Java官方提供大量的异常类，但没有提供对年龄不合理的异常，为了在程序中表达这种针对性的错误 信息，就需要程序员自定义异常 (2)实现流程 a.自定义xxxException继承自Exception或者其子类； b.提供两个版本的构造方法：一个是无参构造方法 和一个字符串作为参数的构造方法 (3)异常抛出 throw new 异常类型();File类(会用即可)基本概念java.io.File类主要用于描述文件和目录的路径信息，可以获取文件和目录的属性 但不可以修改文件中的内容。常用方法I/O流基本概念I/O就是Input/Output的简写，也就是输入/输出的含义 I/O流就是指读写数据时像流水一样不间断，因此得名为“流”基本分类根据数据读写的单位不同分为：字节流 和 字符流 其中字节流主要指以字节为单位进行读写的流，可以读写任意类型的文件 其中字符流主要指以字符(2个字节)为单位进行读写的流，只能读写文本文件 根据数据流动的方向不同分为：输入流 和 输出流(站在程序的角度) 其中输入流主要指将数据从文件输入到程序中，也就是读取文件中的内容 其中输出流主要指将数据从程序输出到文件中，也就是写入到文件中FileOutputStream类(重中之重)(1)基本概念 java.io.FileOutputStream类主要用于将图像数据之类的原始字节流写入到输出流中 (2)常用方法FileInputStream类(重中之重)(1)基本概念 java.io.FileInputStream类主要用于从输入流中读取图像数据之类的原始字节流。 (2)常用方法作业(1)重点掌握异常机制的总结图和文件的拷贝方式。 (2)编写选修内容中的学生信息管理系统，为JavaSE阶段的项目做铺垫。","categories":[],"tags":[],"keywords":[]},{"title":"15泛型机制、Queue、Set、Map集合","slug":"15泛型机制、Queue、Set、Map集合","date":"2019-09-14T20:59:11.000Z","updated":"2019-09-14T13:12:38.403Z","comments":true,"path":"2019/09/15/15泛型机制、Queue、Set、Map集合/","link":"","permalink":"https://chensnape.github.io/2019/09/15/15泛型机制、Queue、Set、Map集合/","excerpt":"","text":"泛型机制、Queue集合、Set集合、Map集合2019/8/17 8:59:17 泛型机制(重点)基本概念为了避免类型转换异常的发生，从jdk1.5开始提出泛型机制，也就是在集合名称的右侧使用&lt;数据类型&gt;的方式 明确要求该集合中可以存放的元素类型，若存放其它类型的数据则编译报错，如： List&lt;String&gt; lt1 = new LinkedList&lt;String&gt;(); 泛型的本质泛型的本质就是参数化类型，也就是说让数据类型作为参数进行传递，其中E相当于形式参数在集合中负责占位，而创建集合时&lt;&gt;中的数据类型相当于实际参数用于给形式参数进行初始化于是合中所有E都被替换为实际参数对应的类型。 由于实际参数支持非常广泛的类型，因此得名为“泛型” 如： //其中int i叫做形式参数 负责占位 其中E叫做形式参数，负责占位 //int i=5; E =String; //int i=8; E =Student; public void show(){ public interface List{ … … } } //其中5叫做实际参数，用于给形参初始化 其中String叫做实际参数，给形参赋值 show(5); List lt1 = … //其中8叫做实际参数，用于给形参初始化 其中Student叫做实际参数，给形参赋值 show(8); List lt2 = … Queue集合基本概念java.util.Queue集合是Collection集合的子集合，与List集合平级 该集合主要用于描述具有先进先出特性的数据结构，叫做队列 (First in First out FIFO) 该集合的主要实现类是LinkedList类，选择该类是因为队列需要大量的增删操作常用方法Set集合基本概念java.util.Set集合是Collection集合的子集合，与List集合是平级关系 该集合中不允许有重复的元素，并且元素之间没有先后次序 该集合的作用实现类有：HashSet类 和 TreeSet类 其中HashSet类的底层是采用哈希表进行数据管理的 其中TreeSet类的底层是采用二叉树进行数据管理的常用方法参考Collection集合中的常用方法即可 Iterator&lt;E&gt; itertor - 用于获取当前集合中的迭代器，可以遍历集合中所有元素增强版的for循环(for each结构)(1)语法格式 for(元素类型 变量名：数组/集合名称){ 循环体； } (2)执行流程 不断地从数组/集合中取出一个元素赋值给变量名后执行循环体，直到处理完所有元素Map集合基本概念java.util.Map&lt;K,V&gt;集合中存取元素的基本单位是：单对元素，具体类型参数如下： K - 此映射所维护的键(Key)的类型 V - 映射值(Value)的类型 该集合中不能包含重复的键；每个键最多只能映射到一个值。 该集合的主要实现类有：HashMap类 和 TreeMap类。常用方法作业(1)复习和总结集合所有内容，重点掌握Queue、Stack集合及拼接实现和字符串统计。 (2)准备一个HashSet集合，实现生成10个1~20之间不重复的随机数放入集合并打印。 (3)声明一个List集合放入11、22、33、44、55，分别使用4种方式遍历。","categories":[],"tags":[],"keywords":[]},{"title":"14List集合","slug":"14List集合","date":"2019-09-14T20:58:38.000Z","updated":"2019-09-14T13:12:21.258Z","comments":true,"path":"2019/09/15/14List集合/","link":"","permalink":"https://chensnape.github.io/2019/09/15/14List集合/","excerpt":"","text":"List集合、泛型机制、Queue集合、set集合2019/8/16 9:43:11 List集合(重中之重)基本概念java.util.List集合是Collection集合的子集合，该集合中元素有先后顺序且可以重复 该集合的作用实现类有：Array类、LinkedList类、Stack类、Vector类 其中ArrayList类的底层是采用动态数组进行数据管理的，访问方便但增删不方便 其中LinkedList类的底层是采用双向链表进行数据管理的，访问不方便但增删方便 其中Stack类的底层是采用动态数组进行数据管理的，该类主要用于描述具有后进先出的特性的数据结构，叫 做栈（last in first out LIFO）； 其中Vector类的底层采用动态数组进行数据管理的，与ArrayList类相比该类属于线程安全的类，因此效率比较低常用方法(练熟、记住)作业：(1)重点掌握集合框架的两张图和List集合的常用方法。 (2)查询java.util.Stack类，实现将11 22 33 44 55依次入栈再出栈。","categories":[],"tags":[],"keywords":[]},{"title":"13日期类、集合","slug":"13日期类、集合","date":"2019-09-14T20:58:07.000Z","updated":"2019-09-14T13:12:10.925Z","comments":true,"path":"2019/09/15/13日期类、集合/","link":"","permalink":"https://chensnape.github.io/2019/09/15/13日期类、集合/","excerpt":"","text":"String类、StringBuilder类和Stringbuffer类、日期相关的类、集合框架、Collection集合2019/8/15 10:51:33 String类 (重中之重)常用方法(练熟、记住)StringBuilder类和StringBuffer类(重点)基本概念（笔试题）由于String描述的字符串是个常量不可更改，若Java程序中出现大量类似的字符串时需要单独存储 造成内存空间的浪费，此时可以使用StringBuilder类或StringBuffer类取代String类型 来描述可以改变的字符序列。 java.lang.StringBuffer类从jdk1.0开始出现，属于线程安全的类，因此效率比较低 java.lang.StringBuilder类从jdk1.5开始出现，属于线程不安全的类，因此效率比较高常用方法(练熟)日期相关的类(会用即可)Date类(1)基本概念 java.util.Date类主要用于描述特定的瞬间(年月日时分秒)，可以精确到毫秒。 (2)常用方法SimpleDateFormat类(1)基本概念 java.text.SimpleDateFormat类可以实现日期和文本之间的转换 (2)常用方法Calendar类(1)基本概念 java.util.Date类主要用于取代Date类实现年月日时分秒的描述，可以实现全球化 该类是个抽象类，因此不能创建对象，只能使用多态的方式使用。集合框架集合的由来当需要在程序中记录单个数据内容时，则声明一个变量即可； 当需要在程序中记录多个类型相同的数据内容时，则声明一个一维数组即可； 当需要在程序中记录多个类型不同的数据内容时，则创建一个对象即可； 当需要在程序中记录多个类型相同的对象时，则声明一个对象数组即可； 当需要在程序中记录多个类型不相同的对象时，则声明一个集合即可；集合的框架Java语言中顶层集合有两种：java.util.Collection集合和java.util.Map集合 其中Collection集合中存取元素的基本单位是：单个元素 其中Map集合中存取元素的基本单位是：单对元素 在以后的开发中很少直接使用Collection集合，而是更多的使用该集合的子集合。Collection集合(重点)常用的方法(练熟、记住)作业(1)重点掌握集合框架的两张图和Collection集合的常用方法。 (2)使用StringBuilder类将字符串&quot;ABCD&quot;转换为&quot;A,B,C,D&quot;并打印出来 (3)提示用户按照指定的格式输入生日信息，计算距离1970年1月1日的天数并打印出来 如输入格式：1998年1月5日","categories":[],"tags":[],"keywords":[]},{"title":"12包装类、数学处理类、String类、常量池","slug":"12包装类、数学处理类、String类、常量池","date":"2019-09-14T20:57:30.000Z","updated":"2019-09-14T13:11:37.595Z","comments":true,"path":"2019/09/15/12包装类、数学处理类、String类、常量池/","link":"","permalink":"https://chensnape.github.io/2019/09/15/12包装类、数学处理类、String类、常量池/","excerpt":"","text":"包装类和数学处理类、String类2019/8/14 11:33:40 包装类和数学处理类(会用即可)回顾： Java语言是一门纯面向对象的编程语言，万物皆对象！ Java语言中的数据类型分为两大类：基本数据类型 和 引用数据类型 int num = 10; public class MyInteger { private int num = 10; - 成员变量 } MyInteger mi = new MyInteger();包装类的概念由于Java语言是一门纯面向对象的编程语言并且某些场合（集合）中要求所有的数据 都必须是对象，对于基本数据类型的变量来说无法满足该需求，因此Java官方提供了8 个类分别对8种基本数据类型进行包装处理，这些类就叫做包装类包装类的分类int =&gt; java.long.Integer类 char=&gt; java.long.Character类 剩下的其他类型都是将首字母换成大写Integer类(1)基本概念 java.long。Integer类是int类型的包装类，里面包含了一个int类型的成员变量 该类由final关键字修饰表示不能被继承 (2)常用方法BigDecimal类(1)基本概念 由于float类型和double类型在运算时可能会有误差，为了实现精确运算则可以借助 java.math.BigDecimal类型加以描述。 (2)常用方法String类(重中之重)基本概念java.lang.String类用于描述字符串，java程序中所有字符串字面值都可以使用该类 的实例(对象)加以描述，如：“abc”。 该类描述的字符串是个常量，一旦创建之后则无法修改，因此可以共享 该类由final关键字修饰表示该类不能被继承。 class SubString extends String(){} 如： String str1 = &quot;123&quot;; str1 = &quot;abc&quot;; - 将字符串“abc”的内存地址赋值给str1，也就是改变引用的指向常量池由于String类型描述的字符串内容是个常量不可改变，因此当Java程序中出现字符串时，Java虚拟机 会将该字符串放入常量池中，下次若出现同样的字符串则无需创建直接使用池中已有的字符串，从而提高效率。常用方法（练熟、记住）作业（1）重点掌握String类相关的代码。 （2）编程统计字符串&quot;ABCD123!@#$%ab&quot;中大写字母、小写字母、数字、其它字符的个数并打印出来 （3）首先输入学生人数，循环输入班级的学生信息，然后放入Student数组中，并打印所有姓zhang的学生信息。 要求姓名用拼音(不要用汉字),学生所有信息用String格式输入，中间用逗号隔开。 其中学生信息有：学号、姓名以及年龄。 提示： 需要查询String类中的split()方法进行字符串拆分，实参传递逗号(&quot;,&quot;)即可。 Student[] arr = new Student[10];","categories":[],"tags":[],"keywords":[]},{"title":"11接口、内部类、object类","slug":"11接口、内部类、object类","date":"2019-09-14T20:57:05.000Z","updated":"2019-09-14T13:11:25.753Z","comments":true,"path":"2019/09/15/11接口、内部类、object类/","link":"","permalink":"https://chensnape.github.io/2019/09/15/11接口、内部类、object类/","excerpt":"","text":"接口、匿名内部类、Object类2019/8/9 8:55:10 接口（重点）基本概念接口本质上就是一种比抽象类还抽象的类，体现在所有变量都是常量以及所有方法都是抽象方法. 定义抽象类的关键字是 abstract class ,而定义接口的关键字是interface. 如： 金属量 货币类 黄金类类接口之间的关系类和类之间的关系 使用extends关键字表达继承关系 支持单继承 类和接口之间的关系 使用implements关键字表达实现关系 支持多实现 接口和接口之间的关系 使用extends关键字表达继承关系 支持多继承抽象类和接口类的区别（笔试题）(1)定义抽象类的关键字是abstract class，而定义接口的关键字是interface； (2)继承抽象类的关键字是extends，而实现接口的关键字是implements； (3)继承抽象类支持单继承，而实现接口支持多实现； (4)抽象类中可以有构造方法，而接口中不可以有构造方法； (5)抽象类中可以有成员变量，而接口中只能有常量； (6)抽象类中可以有成员方法，而接口中只能有抽象方法； (7)抽象类中增加方法可以不影响子类，而接口中增加方法通常会影响子类； (8)从jdk1.8开始接口中允许有非抽象方法，但必须使用default关键字修饰；匿名内部类（重点、难点）语法格式接口/父类类型 引用变量名 = new 接口/父类类型() { 方法的重写 };经验的分享当接口类型的引用作为方法的形参时，实参的传递方式有两种： a.自定义属性接口，然后创建该类的对象作为实参传递； b.使用匿名内部类的语法格式得到接口类型的引用作为实参传递；实际作用当一个类存在的价值仅仅是为某一个类单独服务时，那么就可以将这个类定义为所服务类中的内部类 这样可以溢出该类的实现细节并且可以方便的访问外部类的私有成员而不再需要提供公有的get和set方法基本类型普通内部类 - 直接将一个类的定义放在另外一个类的类体中，隶属于对象层级 静态内部类 - 使用static关键字修饰的内部类，；隶属于类层级 局部内部类 - 直接将一个类的定义放在方法体的内部时 - 作用范围是从声明开始一直到方法体结束Object类###常用的包 java.lang包 - 该包是Java语言的核心包,该包中的内容由Java虚拟机自动导入 - 如：System类、String类等 java.util包 - 该包是Java语言的工具包，里面包含了大量的工具类以及集合类 - 如：Scanner类、Random类等 java.io包 - 该包是Java语言中的输入输出包，里面包含了大量读写文件类 - 如：FileInputStream类、FileOutputStream类等 java.net - 该包是Java语言的网络包，里面包含了大量网络编程的类 - 如：ServerSocket类、Socket类等 Object类（1）基本概念 java.lang.Object；类是Java语言中类层次结构的 根类，任何类都是该类的直接或间接子类。 （2）常用的方法（重点） boolean equals(Object obj) - 用于判断当前正在调用的对象是否与参数对象相等 - 该方法默认比较两个对象的地址，与==的结果一致 - 为了比较两个对象的内容，需要重写该方法 - 当该方法被重写时，应该去重写hashCode方法 int hashCode() - 用于获取调用对象的哈希码值（内存地址编号） - 若两个对象调用equals方法的结果相等，则各自调用方法的结果就必须相同 - 若两个对象调用equals方法的结果不相等，则各自调用方法的结果就应该不相同 - 为了使得该方法的结果与equals方法保持一致，需要重写该方法 String tostring() - 用于获取调用对象的字符串形式 - 该方法返回的字符串默认格式为：包名.类名@哈希码的十六进制 - 为了使得该方法返回更有意义的数据，则重写该方法 - 使用print()或println()或字符串拼接引用变量时，都会自动调用toString方法练习(1)编程实现Runner接口，里面提供一个描述奔跑的抽象方法run； 编程实现Hunter接口继承自Runner接口，里面提供一个描述捕猎的抽象方法hunt； 编程实现Person类实现Hunter接口，在main方法中使用多态方式调用上述方法测试 (2) 编程实现Student类的封装，特征有：学号和姓名，要求提供打印所有特征的方法； 编程实现StudentTest类，在main方法中使用有参方式构造两个对象并打印特征作业(1)重点掌握Gold类相关的代码以及Student.java文件的代码。 (2)自定义Person类实现封装，特征有：姓名和年龄，要求以姓名为基准重写 equals方法、hashCode方法以及toString方法。 (3)自定义InterfaceA接口，里面含有一个抽象方法int method(int n)； 自定义ClassA类实现InterfaceA接口并重写method方法，要求计算1到n的和并返回 自定义ClassB类实现InterfaceA接口并重写method方法，要求计算n的阶乘并返回； 自定义InterfaceTest测试类，里面包含一个参数为InterfaceA接口形参的方法， 并在该方法体中调用method方法，最后在main方法中调用该方法。","categories":[],"tags":[],"keywords":[]},{"title":"10访问控制、final、多态抽象类","slug":"10访问控制、final、多态抽象类","date":"2019-09-14T20:56:24.000Z","updated":"2019-09-14T13:11:11.301Z","comments":true,"path":"2019/09/15/10访问控制、final、多态抽象类/","link":"","permalink":"https://chensnape.github.io/2019/09/15/10访问控制、final、多态抽象类/","excerpt":"","text":"访问控制、final关键字、多态、抽象类2019/8/8 8:00:00 访问控制常用的访问控制符（笔试题）访问控制符 访问权限 本类内部 本包中的类 子类内部 其它包的类 public 公有的 ok ok ok ok protected 保护的 ok ok ok no 啥也不写 默认的 ok ok no no private 私有的 ok no no no要求大家掌握的内容： a.public修饰的内容可以在任意位置使用； b.private修饰的内容只能在本类中使用； c.通常情况下，成员方法都使用public修饰，成员变量都使用private修饰； 包的定义package 包名; - 为了方便管理以及避免命名冲突的问题 package 包名1.包名2...包名n; - 为了定义多层包final关键字（重点）基本概念final关键字本意为&quot;最终的，不可更改的&quot;，修饰类、成员方法以及成员变量等。使用方式final关键字修饰类体现在该类不能被继承。 - 为了防止滥用继承，如：java.lang.System类等 final关键字修饰成员方法体现在该方法不能被重写但可以被继承。 - 为了防止不经意间造成方法的重写，如：java.text.DateFormat类中format方法 final关键字修饰成员变量体现在该变量必须初始化而且不能更改。 - 为了防止不经意间造成的修改，如：java.lang.Thread类中MAX_PRIORITY等扩展： 在以后的开发中很少单独使用static或final关键字修饰成员变量，而是使用public static final 这些关键字共同修饰成员变量表达常量的含义，常量的命名规范是：所有字母大写，不同的单词之间采用下划线连接，如： public static final double PI = 3.14; 多态（重中之重）基本概念多态主要指同一种事物表现出来的多种形态。 饮料：可乐、雪碧、脉动、乐虎、红牛、... 宠物：猫、狗、鸟、乌龟、小强、... 人： 学生、教师、工人、保安、...语法格式父类类型 引用变量名 = new 子类类型();如： Person p = new Worker(); p.show(); 解析： 编译阶段调用Person类型的show方法，运行阶段调用Worker类中的show方法 多态的效果(1)当父类类型的引用指向子类类型的对象时，父类引用可以直接调用父类独有的方法； (2)当父类类型的引用指向子类类型的对象时，父类引用不可以直接调用子类独有的方法 (3)对于父子类都有的非静态方法来说，编译阶段调用父类版本，运行阶段调用子类版本 (4)对于父子类都有的静态方法来说，编译和运行阶段都调用父类版本； 引用类型之间的转换(1)Java语言中引用数据类型之间的转换分为：自动类型转换 和 强制类型转换。 其中自动类型转换主要指从小类型到大类型之间的转换，也就是子类到父类的转换 其中强制类型转换主要指从大类型到小类型之间的转换，也就是父类到子类的转换 (2)引用数据类型之间的转换必须发生在父子类之间，否则编译报错。 (3)若转换的目标类型并不是该引用真正指向的子类类型，则编译通过，运行阶段发生类型转换异常。 (4)为了避免上述问题的发生，应当在强转之前使用instanceof关键字进行检查，如下： if(引用变量名 instanceof 目标类型) - 判断引用指向的对象是否为目标类型实际意义多态的实际意义在于屏蔽不同子类的差异实现通用的编程而带来不同的效果。抽象类（重点）抽象方法的概念抽象方法就是指不能具体实现的方法，也就是没有方法体并使用abstract关键字修饰 语法格式如下： 访问权限 abstract 返回值类型 方法名称(形参列表);抽象类的概念抽象类就是指不能具体实例化的类，而且使用abstract关键字修饰。注意事项(1)抽象类中可以有成员变量、成员方法以及构造方法； (2)抽象类中可以没有抽象方法，也可以有抽象方法； (3)拥有抽象方法的类必须是抽象类，因此真正意义上的抽象类必须有抽象方法而且 使用abstract关键字修饰。实际意义抽象类的实际意义不在于自身创建对象而在于被继承，当一个类继承抽象类后必须重写抽象方法，否则该类也得变成抽象类。 抽象类对子类具有强制性和规范性，因此叫做 模板设计模式。练习编程实现Person类的封装，特征：姓名和年龄，要求提供打印所有特征的方法； 编程实现Worker类的封装并继承Person类，特征：薪水，要求提供打印特征的方法； 编程实现PersonWorkerTest类，在main方法中分别创建Person和Worker类型对象并打印特征。作业（1）重点掌握ShapeTest.java文件和抽象类相关的代码。 （2）自定义抽象类Account实现封装，特征：账户余额(balance)，在该类中提供一个 计算利息并返回的抽象方法。 自定义FixedAccount类继承Account类并重写抽象方法，要求在main方法中使用多态 方式构造对象并存入1000元，计算利息后打印出来(其中利率0.003)。","categories":[],"tags":[],"keywords":[]},{"title":"9static、单例、继承","slug":"9static、单例、继承","date":"2019-09-14T20:55:57.000Z","updated":"2019-09-14T13:11:00.689Z","comments":true,"path":"2019/09/15/9static、单例、继承/","link":"","permalink":"https://chensnape.github.io/2019/09/15/9static、单例、继承/","excerpt":"","text":"static关键字、继承2019/8/7 10:56:05 static关键字基本概念通常情况下成员变量隶属于对象层级，也就是每当创建一个对象就会申请一份独立的内存空间来存放该对象独立的成员变量信息，若所有对象中某个成员变量的数值一定相同时还单独记录，则会造成内存空间的浪费。 为了解决上述问题，可以使用static关键字修饰成员变量来表达静态的含义，此时成员变量由对象层级提升为类层级被所有对象共享，该成员变量会随着类的加载而准备就绪，与是否创建对象无关。 static关键字还可以修饰成员方法，推荐使用 类名.的方式调用 使用方式（1）在非静态成员方法中既能访问非静态的成员方法又能访问静态的成员； (成员：成员变量+成员方法 静态成员被所有对象共享) （2）在静态成员方法中只能访问静态成员不能访问非静态的成员； (成员：成员变量+成员方法 调用静态方法时可能还没有创建对象) （3）只有隶属于类层级被所有对象共享的内容才能使用static关键字修饰； (不能滥用static关键字)单例设计模式（重中之重）（1）基本概念 在某些特殊场合中，一个类对外提供且只提供一个对象，这样的类叫做单例类 而设计单例类的思想和模式叫做 单例设计模式。 （2）实现流程 a.私有化构造方法，使用private关键字修饰； b.声明本类类型的引用指向本类类型的对象，并使用private static关键字修饰； c.提供公有的get方法负责将对象返回出去，并使用static关键字修饰； （3）实现方式 单例设计模式的实现方式有两种：饿汉式 和 懒汉式，以后开发中推荐使用饿汉式继承（重中之重）基本概念当多个类之间有相同的特征和行为时，可以将相同的内容提取出来组成一个公共类，让多个类吸收公共类中已有成员然后在多个类内部编写自己独有成员的机制，叫做继承。 使用继承可以提高代码的复用性、可维护性以及扩展性。 在Java语言中使用extends（扩展）关键字来表达继承关系。如： public class Worker extends Person{} - 表示Worker类继承自Person类 其中Person类叫做超类、父类、基类。 其中Worker类叫做派生类、子类、孩子类。 注意事项(1)子类不可以继承父类的构造方法和私有方法，但私有成员变量可以继承不能使用； (2)无论使用何种方式构造子类对象时都会自动调用父类的无参构造方法来初始化从父类 中继承下来的成员变量相当于在构造方法的第一行增加代码：super()的效果。 (3)使用继承必须满足逻辑关系：子类 is a 父类，也就是不能滥用继承。 (4)Java语言中只支持单继承不支持多继承，也就是一个子类只能有一个父类，但一个父类可以有多个子类。方法的重写(Override)(1)基本概念 从父类中继承下来的版本不足以满足子类的需求时，就需要子类重新写一个和父类中一样的版本来覆盖从父类中继承的版本，该方式就叫做方法的重写。 (2)重写的原则 a.要求方法名相同、参数列表相同、返回值类型相同，从jdk1.5开始允许返回子类类型 b.要求访问权限不能变小，可以相同或者变大； c.要求不能抛出更大的异常(异常机制)；案例编程实现Singleton类的封装； 编程实现SingletonTest类进行Singleton类的测试，要求在main方法中能得到且只能得到Singleton类的一个对象。练习编程实现Person类的封装，特征有：姓名、年龄，行为：打印所有特征的方法 编程实现Worker类继承自Person类，Worker类内部暂时啥也不写 编程实现WorkerTest类，在main方法中使用无参方式构造对象并打印特征作业(1)重点掌握Singleton.java和Person.java以及Worker.java文件的代码。 (2)自定义矩形(Rect)类，特征有：横纵坐标、长度及宽度，要求实现封装并提供打印方法； 自定义圆形(Circle)类，特征有：横纵坐标、半径，要求实现封装并提供打印方法； 提取共性自定义图形(Shape)类。 自定义ShapeTest类，自定义成员方法实现既能打印矩形又能打印圆形的方法并调用 (最后一个成员方法选做)","categories":[],"tags":[],"keywords":[]},{"title":"8this、传参过程、递归、封装","slug":"8this、传参过程、递归、封装","date":"2019-09-14T20:55:03.000Z","updated":"2019-09-14T13:10:50.708Z","comments":true,"path":"2019/09/15/8this、传参过程、递归、封装/","link":"","permalink":"https://chensnape.github.io/2019/09/15/8this、传参过程、递归、封装/","excerpt":"","text":"this关键字、方法的传参过程和递归调用、封装、static关键字2019/8/6 9:38:40 this关键字（原理、理解）基本概念若在构造方法中出现this关键字，则代表当前正在构造的对象； 若在成员方法中出现this关键字，则代表当前正在调用的对象；使用形式（1）当形参变量名和成员变量名同名时，在方法体中会优先使用形参变量，若希望使用 成员变量则需要在变量名的前面加上this.的前缀明确要求使用成员变量（掌握） （2）在构造方法的第一行可以使用this()的方式调用本类中的其它结构方法（了解）方法的传参过程和递归调用方法的传参过程（原理、理解）（1）main方法是程序的入口，先为main方法中变量申请内存空间并初始化； （2）调用max方法时，为max方法的形参变量申请内存空间； （3）将实参变量的数值赋值给形参变量，然后执行max的方法体； （4）当max方法体结束后，释放max方法形参变量所占的内存空间； （5）main方法得到max方法的返回值后继续向下执行； （6）当main方法结束后，释放main方法中局部变量的内存空间；要求大家掌握的内容a.当基本数据类型的变量作为参数传递时，形参变量数组的改变通常不影响实参变量 b.当引用数据类型的变量作为参数传递时，形参变量指向的内容发生改变后会影响到实参变量指向的内容 c.当引用数据类型的变量作为参数传递时，若形参变量改变指向后再改变指向的内容通常不会影响到实参变量指向的内容；方法的递归调用（重点、难点）（1）基本概念 递归主要指在方法体的内部调用当前方法身前的形式。 案例： 自定义成员方法实现参数n的阶乘计算并返回。 解析： 5！=5*4*3*2*1； 4！=4*3*2*1； 3！=3*2*1； 2！=2*1； 1！=1； n!=n*(n-1)*(n-2)*...*1; 解析： 5！=5*4!; 4!=4*3!; 3!=3*2!; 2!=2*1!; 1!=1; n!=n*(n-1)!; n=1时，return 1; （2）使用原则 a.必须找到递归的规律以及退出条件； b.使用递归必须使得问题简单化而不是复杂化； c.若递归影响到程序的执行性能，则使用递推取代之；封装（重中之重）基本概念通常情况下可以给成员变量赋值合法但不合理的数值， 无论编译阶段还是运行阶段都不会报错或给出提示，此时与现实生活不符。 为了避免上述错误的发生，需要对成员变量进行密封包装处理， 从而隐藏类中代码的细节以及保证成员变量值的合理性，该机制就叫做 封装。实现流程（1）私有化成员变量，使用private关键字修饰； （2）提供公有的get和set方法，在方法体中进行合理值的判断； （3）在构造方法中调用set方法进行合理值判断；作业1. 重点掌握Car.java文件的代码(20遍) 2. 分别使用递归和递推的方式计算费氏数列中第n项数值并返回(参考PPT) 3. 提示用户输入班级的学生人数以及每个学生的信息，学生的信息有：学号、姓名、 年龄，最后分别打印出来。 提示： Student[] arr = new Student[num]; 4. 编程实现Person类的封装，特征有：姓名、年龄、国籍 编程实现PersonTest类，在main方法中使用有参方式创建两个对象并打印特征","categories":[],"tags":[],"keywords":[]},{"title":"7成员方法、构造方法和方法重载","slug":"7成员方法、构造方法和方法重载","date":"2019-09-14T20:54:18.000Z","updated":"2019-09-14T13:10:39.436Z","comments":true,"path":"2019/09/15/7成员方法、构造方法和方法重载/","link":"","permalink":"https://chensnape.github.io/2019/09/15/7成员方法、构造方法和方法重载/","excerpt":"","text":"成员方法、构造方法和方法重载2019/8/5 8:56:47 成员方法（重中之重）语法格式class 类名{ 返回值类型 成员方法名（形参列表）{ 成员方法体； } } 如： class Person{ void show(){ System.out.println(&quot;没事出来秀一下&quot;); } } 注意： 当成员方法名由多个单词组成时，通常要求从第二个单词起首字母大写。方法的详解（1）返回值类型 返回值主要指从方法体内向方法体外返回的数组内容。 返回值类型主要指返回值的数据类型，可以是基本数据类型，也可以是引用数据类型 如： 当返回的数据内容为66时，则返回值类型写int 即可 当返回的数据内容为3.14时，则返回值类型写double 即可 当返回的数据内容为&quot;hello&quot;时，则返回值类型写String 即可 在方法体中使用return 关键字实现数值的返回并结束当前方法。 如： 当返回的数据内容为66时，则方法体中写 return 66 即可; 当返回的数据内容为3.14时，则方法体中写 return 3.14 即可; 当返回的数据内容为num时，则方法体中写 return num 即可; 若该方法不需要返回任何数据内容时，则返回值类型写void即可。 （2）形参列表 形式参数主要用于将方法体外的数据带入方法体的内部 形参列表表示可以有多个形式参数，语法格式：数据类型 形参1，数据类型 形参2，... 如： 当传入的数据内容为66时，则形参列表写为 int i即可； 当传入的数据内容为3.14时，则形参列表写为 double d即可； 当传入的数据内容为&quot;hello&quot;时，则形参列表写为 String s即可； 当传入的数据内容为66 和&quot;hello&quot;时，则形参列表写为 int i, String S即可； 当传入的数据内容为3.14 和&quot;hello&quot;时，则形参列表写为 double d,String s即可； 当该方法不需要传入任何数据内容时，则形参列表位置啥也不写即可。 （3）成员方法体 成员方法中主要编写描述该方法功能的语句 如： 若该方法的功能时打印一句话时，则方法体中写：System.out.println(...); 若该方法的功能是找到最大值并返回时，则方法体中写：return ia&gt;ib？ia：ib;方法的调用（1）语法格式 引用变量名 .成员变量名（实参列表）; 如： p.show(); - 表示使用引用变量p调用名字为show 的成员方法 （2）注意事项 a.实际参数列表主要用于对形式参数列表进行赋值操作，因此参数的类型、参数的个数 以及参数的顺序必须保持一致； b.实际参数可以传递直接量、变量、表达式、方法的调用等；构造方法和方法重载如： Person p =new Person(); - 表示声明Person类型的引用指向Person类型的对象 p.show(); - 表示调用名字为show的方法构造方法（重中之重）（1）语法格式 class 类名{ 类名（形参列表）{ 构造方法体； } } 如： class Person{ Person(){ } } （2）注意事项 a.构造方法的名称与类名相同并且没有返回值类型，连void都不许有； b.当使用new关键字创建对象时会自动调用构造方法来实现成员变量的初始化 工作； （3）默认构造方法 a.当一个类没有自定义构造方法时，编译器会自动添加一个无参的空构造方法， 叫做默认/缺省构造方法，如：Person(){} b.若类中出现自定义构造方法，则编译不再提供任何形式的构造方法方法的重载（Overload 会用即可）（1）基本概念 在Java语言中方法名相同、参数列表不同的方法之间构成重载关系。 （2）方法重载的主要形式为：参数的个数不同、参数的类型不同、参数的顺序不同 与形参变量名以及返回值类型无关，但返回值类型最好相同。 判断能否重载的核心，调用能否区分。 （3）实际意义 方法重载的实际意义在于调用者只需要记住一个方法名就可以调用各种不同的版本， 从而实现各种不同的效果。 如： char c1 =&apos;a&apos;; System.out.println(c1); int i1 =10; System.out.println(i1); double d1 =3.14 System.out.println(d1); ... ...练习：（1）自定义Point类，特征有：横坐标和纵坐标，行为有：打印所有特征的数值 要求再main方法中声明Point类型的引用指向Point类型的对象并调用方法打印特征 再将特征修改为3和5后再次调用方法打印特征 自定义成员方法实现将横坐标修改为参数指定的数值 自定义成员方法实现将纵坐标修改为参数指定的数值 自定义成员方法实现获取横坐标的数值并返回的行为 自定义成员方法实现获取纵坐标的数值并返回的行为 （2）编程实现Girl类，特征有：姓名、年龄、是否有男朋友，行为有： 无参构造方法、有参构造方法、打印所有特征的方法。 要求在main方法中分别使用无参和有参方式构造对象并打印特征 （3）编程实现Worker类，特征有：姓名、年龄、薪水，行为有： 无参构造方法、有参构造方法、打印所有特征的方法、实现获取姓名并返回的方法、 修改姓名为参数指定数值的方法、获取年龄并返回的方法、修改年龄为参数指定数值的方法、 获取薪水并返回的方法、修改薪水为参数指定数值的方法、实现薪水增加500元的行为、 实现薪水增加参数指定数值的行为。要求在main方法中分别使用无参和有参方式构造对象并打印特征、 最后使用有参方式构造的对象调用上述方法测试。 作业（1）重点理解和掌握Worker.java文件的所有代码，至少敲20遍。 （2）自定义Car类，特征有：品牌(brand)、颜色(color)、价格(price)，行为有： 无参构造、三个参数的构造、打印所有特征的行为、获取品牌并返回的行为、获取颜色并返回的行为、 获取价格并返回的行为、设置品牌为参数指定的数值、设置颜色为参数指定的数值、 设置价格为参数指定的数值、实现价格增长1000元的行为、实现价格增长参数指定数值的行为。 要求在main()方法中使用无参形式构造对象打印特征，再使用有参形式构造对象打印特征 并使用有参形式构造的对象调用其他方法测试。","categories":[],"tags":[],"keywords":[]},{"title":"6二维数组、面向对象","slug":"6二维数组、面向对象","date":"2019-09-14T20:53:53.000Z","updated":"2019-09-14T13:10:28.665Z","comments":true,"path":"2019/09/15/6二维数组、面向对象/","link":"","permalink":"https://chensnape.github.io/2019/09/15/6二维数组、面向对象/","excerpt":"","text":"二维数组、面向对象编程的概念2019/8/2 14:02:20 二维数组（会用即可）基本概念 当需要在程序中记录多个数据内容时，则声明一个一维数组即可， 而一维数组本质上就是在内存中申请一段连续的存储单元。 二维数组本质上就是由多个一维数组摞在一起组成的数组，也就是说二维数组 中的每个元素都是一个一维数组，而一维数组中的每个元素才是数据内容。声明方式（1）语法格式 数据类型[][] 数组名称=new 数据类型[行数][列数]; 如： int[][] arr = new int[2][3]; - 表示声明具有2行3列元素类型为int的二维数组 其中行下标范围是：0 ~ 1； 其中列下标范围是：0 ~ 2； （2）元素初始化 数据类型[][] 数组名称 = {{初始值1,初始值2,...},...}; 如： int[][] arr = {{1, 2, 3}, {4, 5, 6}}; - 表示声明具有2行3列的二维数组面向对象编程的概念（理解）什么是对象？万物皆对象什么是面向对象？面向对象就是指以属性（特征）和行为的观点分析现实世界中事物的方式。什么是面向对象编程？面向对象编程就是指先以面向对象的方式进行分析，再使用面向对象的编程语言进行翻译的过程； 其中c语言是一门面向过程的编程语言； 其中c++语言是一门即面向过程又面向对象的编程语言； 其中Java语言是一门纯面向对象的编程语言。类和对象以及应用（重中之重、抽象、难点）类和对象的概念 对象主要指现实生活中客观存在的实体，在Java语言中体现为内存中的一块存储区域 类简单来说是“分类”的含义，是多个对象共性提取的抽象描述，在Java语言中体现为 一种引用数据类型，里面包含了描述特征的成员变量以及描述行为的成员方法。类的定义（1）类定义的语法格式 class 类名{ 类体； } 如： class Person{ } 注意： 当类名由多个单词组成时，通常要求每个单词的首字母都要大写。 （2）成员变量定义的语法格式 class 类名{ 数据类型 成员变量名 = 初始值； - 其中=初始值通常都省略 ... } 如： class Person{ String name; int age; } 注意： 当成员变量名由多个单词组成时，通常要求从第二个单词起首字母大写。 思考： 成员变量和局部变量有何区别？ 解析： 成员变量 - 定义在类体内方法体外的变量，作用范围从定义开始到整个类体结束 局部变量 - 定义在方法体内的变量，作用范围从定义开始到整个方法体结束对象的创建（1）语法格式 new 类名（）； 如： new Person(); - 表示创建Persin类型对象，由于该对象没有指定名称，叫匿名对象 （2）注意事项 a.使用new关键字创建对象的过程，叫做类的实例化； b.创建对象的本质就是在内存空间的堆区申请一块存储区域，用于记录该对象独有的特征信息。引用的定义（1）基本概念 使用引用数据类型定义的变量叫做 引用型变量，简称为引用； 引用变量通常用于记录对象在堆区中的内存地址信息，便于下次访问 （2）语法格式 类名 引用变量名 如： Person p; - 表示定义Person类型的引用 Person p = new Person(); - 表示声明Person类型的引用指向Person类型的对象 引用的变量名.成员变量名； 如： p.name=&quot;zhangfei&quot;;练习（1）编程实现Point类，特征有：横坐标(x)和纵坐标(y)，要求在main方法 声明Point引用指向Point对象并打印特征，修改特征为3和5后再次打印作业1. 要求重点理解一维数组的增删改查以及Person.java文件的代码， 其中Person类的代码至少敲20遍。 2. 自定义Phone类，特征有：品牌和价格，行为有：打印品牌和价格的方法， 要求在main()方法声明Phone类型的引用指向Phone类型的对象并打印特征， 将品牌和价格修改为&quot;Nokia&quot;和598后再次打印。","categories":[],"tags":[],"keywords":[]},{"title":"5循环结构、一维数组","slug":"5循环结构、一维数组","date":"2019-09-14T20:53:26.000Z","updated":"2019-09-14T13:10:16.332Z","comments":true,"path":"2019/09/15/5循环结构、一维数组/","link":"","permalink":"https://chensnape.github.io/2019/09/15/5循环结构、一维数组/","excerpt":"","text":"循环结构、一维数组2019/8/1 14:03:13 循环结构双重循环（难点、重点）（1）语法格式 for(初始化表达式1；条件表达式2；修改初始值表达式3){ for(初始化表达式4；条件表达式5；修改初始值表达式6){ 循环体 } } （2）执行流程 执行表达式1=&gt;判断表达式2是否成立 =&gt;若成立，则执行表达式4=&gt;判断表达式5是否成立 =&gt;若成立，则执行循环体=&gt;执行表达式6=&gt;判断表达式5是否成立 =&gt;若不成立，则内层循环结束=&gt;表达式3=&gt;判断表达式2是否成立 =&gt;若不成立，则外层循环结束 （3）注意事项 a.外层循环变量变一下，内层循环从头到尾跑一圈 b.当需要打印多行多列时，则需要使用双重for循环；break关键字在嵌套的循环结构中，break用于退出所在循环体 如果要退出外层循环体，需要使用标号的方式 for(...){ outer:for(...){ for(...){ for(...){ break; break outer; } } } }while循环（会用）（1）语法格式 while（条件表达式）{ 循环体； } （2）执行流程 判断条件表达式是否成立 =&gt;若成立，则执行循环体=&gt;判断条件表达式是否成立 =&gt;若不成立，则结束循环 （3）注意事项 a.while循环和for循环都属于当型循环，完全可以互换； b.while循环更善于明确循环条件但不明确循环次数的场合； for循环通常更善于明确循环次数/循环范围的场合中； c.while(true)和for(;;)都表示无限循环；一维数组（重点）基本概念当需要在程序中记录单个数据内容时，则声明一个变量即可； 当需要在程序中记录多个类型相同的数据内容时，则声明一个一维数组即可 而一维数组本质上就是在内存中申请一段连续的存储单元；声明方式（1）语法格式 数据类型[] 数组名 =new 数据类型 [数组的长度] 如： int[] arr= new int[3]; - 表示声明一个长度为3元素类型为int类型的一维数组 int num =3; - 表示声明一个初始值为3元素类型为int类型的变量 int arr[] = new int[3] - 不推荐使用 （2）元素初始化 数据类型[] 数组名={初始值1, 初始值2, ...}; 如： int[] arr = {11, 22, 33, 44, 55}; - 声明数组的同时指定元素的初始值练习（1）提示用户输入一个正整数n，使用while循环实现1/1 + 1/2 + ...+1/n （2）使用双重for循环分别打印以下图案： ***** * i=1时，1个* ***** i=1时，5个* * ***** ** i=2时，2个* **** i=2时，4个* *** ***** *** i=3时，3个* *** i=3时，3个* ***** ***** **** i=4时，4个* ** i=4时，2个* ******* ***** *****i=5时，5个* * i=5时，1个* *********作业1. 重点掌握数组的声明和初始化方式 2. 编程实现九九乘法表的打印(参考PPT) 3. 声明一个长度为5元素类型为int类型的一维数组，打印数组中的所有元素值； 使用元素11、22、33、44分别对数组中的前四个元素赋值，再打印所有元素值； 将元素55插入到下标为0的位置，原有元素向后移动，再打印所有元素值； 再将元素55从数组中删除，删除方式为后续元素向前移动，最后位置置为0并打印； 查找数组中是否存在元素22，若存在则修改为220后再次打印所有元素； 4. 声明一个初始值为11 22 33 44 55的一维数组并打印所有元素 声明一个长度为3元素类型为int类型的一维数组并打印所有元素 实现将第一个数组中间3个元素赋值到第二个数组中 再次打印第二个数组中的所有元素 5. 编程统计用户输入任意一个正整数中每个数字出现次数的统计并打印。 如：123123 =&gt; 1出现2次，2出现2次，3出现2次 6. 编程实现双色球抽奖游戏(参考PPT)。","categories":[],"tags":[],"keywords":[]},{"title":"4分支结构、循环结构","slug":"4分支结构、循环结构","date":"2019-09-14T20:50:08.000Z","updated":"2019-09-14T13:09:44.278Z","comments":true,"path":"2019/09/15/4分支结构、循环结构/","link":"","permalink":"https://chensnape.github.io/2019/09/15/4分支结构、循环结构/","excerpt":"","text":"分支结构、循环结构2019/7/31 9:07:27 分支结构（重中之重）基本概念当需要在Java程序中做出判断并作出选择时，就可以使用分支结构加以描述。if分支结构（1）语法格式 if（条件表达式）{ 语句块； } （2）执行流程 判断条件表达式是否成立 =&gt;若成立。则执行语句块； =&gt;若不成立，则跳过语句块不执行；if else 分支结构（1）语法格式 if（条件表达式）{ 语句块1； } else{ 语句块2； } （2）执行流程 判断条件表达式是否成立 =&gt;若成立，则执行语句块1； =&gt;若不成立，则执行语句块2；if-else if-else分支结构（1）语法格式 if（条件表达式1）{ 语句块1； } else if（条件表达式2）{ 语句块2； } ... ... else{ 语句块n; } （2）执行流程 判断条件表达式1是否成立 =&gt; 若成立，则执行语句块1； =&gt; 若不成立，则判断条件表达式2是否成立 =&gt; 若成立，则执行语句块2； =&gt; 若不成立，则执行语句块n；switch-case分支结构（了解）（1）语法格式 switch(变量/表达式){ case 直接量1: 语句块1; break; case 直接量2: 语句块2; break; ... ... default: 语句块n; } （2）执行流程 计算变量/表达式的数值 =&gt; 判断是否与直接量1匹配 =&gt; 若匹配，则执行语句块1 =&gt; 执行break跳出该结构； =&gt; 若不匹配，则判断是否与直接量2匹配 =&gt; 若匹配，则执行语句块2 =&gt; 执行break跳出该结构； =&gt; 若不匹配，则执行语句块n; （3）注意事项(笔试题) switch()中支持的类型有：byte、short、char以及int类型 从jdk1.5开始支持枚举类型，从jdk1.7开始支持String类型。循环结构（重中之重）基本概念当需要在Java程序中重复执行一段代码时，就需要使用循环结构加以处理。for循环（1）语法格式 for（初始化表达式；条件表达式；修改初始值表达式）{ 循环体； } （2）执行流程 执行初始化表达式 =&gt; 判断条件表达式是否成立 =&gt; 若成立，则执行循环体 =&gt; 执行修改初始值表达式 =&gt; 判断条件表达式是否成立 =&gt; 若不成立，则循环结束break和continuebreak关键字可以用在switch-case分支结构和循环结构中，用于跳出当前循环 continue关键字可以用在循环结构中表示结束本次循环继续下一次循环(熟悉)特殊的循环for(;;) - 这种没有循环条件的循环叫做无限循环，俗称“死循环”； - 使用break关键字搭配使用练习（1）使用for循环实现1 ~ 10000之间累加和的计算并打印 50005000 （2）提示用户输入一个整数，使用上述结构判断是正数、负数还是零 （3）提示用户输入一个整数，使用if-else分支结构判断负数还是非负数 （4）提示用户输入两个整数，使用if分支结构找到最大值并打印。 作业1.要求重点掌握if和for相关的所有案例代码。 2.求用户输入四个整数中的最大值并打印（参考PPT） 3.根据用户输入的个人薪水来计算个人所得税并打印，其中个税起征点为5000元(参考PPT) 个人所得税公式：应纳个人所得税税额=应纳税所得额×适用税率-速算扣除数 4.出租车计费系统的实现（参考PPT）。 5.使用for循环打印三位数中的所有水仙花数(参考PPT) 6.使用for循环实现将任意位数的正整数逆序输出。 7.编程实现猜数字游戏(参考PPT)，其中生成随机数的代码为： import java.util.Random; Random ra = new Random(); int num = ra.nextInt(100); - 表示生成0 ~ 99之间的整数存放到变量num中 8.提示用户输入一个整数，使用上述结构判断是正数、负数还是零(if-else if-else) 9.提示用户输入两个整数，使用if分支结构找到最大值并打印。","categories":[],"tags":[],"keywords":[]},{"title":"3字符类型、运算符","slug":"3字符类型、运算符","date":"2019-09-14T20:49:37.000Z","updated":"2019-09-14T13:09:23.085Z","comments":true,"path":"2019/09/15/3字符类型、运算符/","link":"","permalink":"https://chensnape.github.io/2019/09/15/3字符类型、运算符/","excerpt":"","text":"字符类型、运算符2019/7/30 8:48:53 字符类型在Java语言中用于描述字符信息的类型有：char，如：&apos;1&apos;，&apos;a&apos;，&apos;中&apos;等... 其中char类型占用内存空间的大小为2个字节，在以后的开发中char类型很少使用 使用更多的是多个字符组成的字符串，使用&quot;&quot;括起来，并且用String类型加以描述 为了使得字符能够有效地记录到计算机中，给每个字符指定了一个编号，叫做 ASCII值 要求大家记住的ASCII值有： &apos;0&apos; - 48 &apos;A&apos; - 65 &apos;a&apos; - 97 空格 - 32 换行符 - 10 要求大家记住的转义字符有： \\&quot; - &quot; \\&apos; - &apos; \\\\ - \\ \\t - 制表符(tab键) \\n - 换行符基本数据类型之间的转换（尽量了解）在Java语言中数据类型之间的转换分为两大类： 自动类型转换 - 主要指从小范围到大范围之间的转换 强制类型转换 - 主要指从大范围到小范围之间的转换 - 目标类型 变量名 = (目标类型)源类型的变量名 - byte b1 = (byte)s1; - 在以后的开发中尽量少使用强制类型转换，因为可能会造成数据的丢失运算符（重点）算术运算符+ 表示加法运算发 - 表示减法运算符 * 表示乘法运算符 / 表示除法运算符 % 表示取余运算符关系运算符&gt;表示是否大于运算符 &gt;=表示是否大于等于运算符 &lt;表示是否小于运算符 &lt;=表示是否小于等于运算符 ==表示是否等于运算符 ！=表示是否不等于运算符 所有以关系运算符为最终运算的表达式结果都一定是boolean类型，只有true和false.自增减运算符+表示加法运算符 ++表示自增运算符，让变量自身的数值加1 -表示减法运算符 --表示自减运算符，让变量自身的数值减1逻辑运算符&amp;&amp; 表示逻辑与运算符，相当于“并且”，同真为真，一假为假 || 表示逻辑或运算符，相当于“或者”，一真为真，同假为假 ！ 表示逻辑非运算符，相当于“取反”，真为假，假为真 短路特性： 对于逻辑与运算符来说，若第一个条件为假则整个表达式为假，此时第二个条件跳过 对于逻辑或运算符来说，若第一个条件为真则整个表达式为真，此时第二个条件跳过条件/三目运算符条件表达式？表达式1：表达式2； =&gt;判断条件表达式是否成立 =&gt;若成立。则执行表达式1； =&gt;若不成立，则执行表达式2；赋值运算符（1）简单赋值 = 表示赋值运算符，用于将=右边的数值赋值给=左边的变量，覆盖变量原本的内容，切记不要与==混淆。 笔试题： ia == 2; - 表示判断ia的数值是否等于2 2 == ia; - 表示判断2是否等于ia的数值，推荐该方法 ia = 2; - 表示将数值2赋值给变量ia，覆盖ia原来的数值 2 = ia; - 编译报错 （2）复合赋值 +=、-=、*=、...运算符的优先级a. ()的优先级极高； b. = 的优先级极低； c. 若实在不确定执行次序，则使用()来确保优先级；作业1.要求重点掌握所有运算符的符号和功能以及时间拆分的案例。 2.提示用户输入一个三位数的正数，然后进行逆序处理再打印。 如： 123 =&gt; 321 打印 3.使用三目运算符判断用户输入的整数是负数、正数还是零。","categories":[],"tags":[],"keywords":[]},{"title":"2变量和注释、数据类型","slug":"2变量和注释、数据类型","date":"2019-09-14T20:48:59.000Z","updated":"2019-09-14T13:08:41.735Z","comments":true,"path":"2019/09/15/2变量和注释、数据类型/","link":"","permalink":"https://chensnape.github.io/2019/09/15/2变量和注释、数据类型/","excerpt":"","text":"变量和注释、数据类型2019/7/29 8:51:00 变量和注释（重中之重）变量的基本概念 当需要在Java程序中记录单个数据内容时，则声明一个变量即可，而变量的本质 就是在内存中申请一块存储单元，由于该存储单元中的数据内容可以改变，因此得名 为“变量”; 由于存放的数据内容大小不同导致所需存储单元的大小不同，在Java语言中使用数据 类型的概念加以描述，为了便于下次访问就需要给存储单元指定一个名称，叫做变量名。变量的声明方式数据类型 变量名 = 初始值； - 其中=初始值可以忽略，但分号不能省略 如： int age = 18; int age;标识符（变量名）的命名规则（1）要求由字母、数字、下划线以及美元$等组成，其中数字不能开头 如：age、name、nianling、age2、name2等 （2）要求不能与Java语言中关键字同名，所谓关键字就是Java语言中用于代表特殊含义的单词 如：public class void int等 （3）区分大小写，长度没有限制但不宜过长 如：Day和day代表两个不同的变量名，不推荐使用 （4）尽量做到见名知意，支持中文但不推荐使用 如：year、month、day、hour、minute、second、size、time等变量输入输出的优化import java.util.Scanner; public class VarIOTest{ public static void main(String[] args){ //1.声明两个变量用于记录姓名和年龄信息 //String name; //int age; //2.提示用户输入姓名和年龄信息并记录到上述变量中 System.out.println(&quot;请输入你的姓名年龄&quot;); //创建扫描器来扫描键盘输入的内容 Scanner sc = new Scanner(System.in); //读取一个字符串放到变量name中 String name = sc.next(); //读取一个整数放到变量age中 int age = sc.nextInt(); //3.打印用户输入的姓名和年龄 //System.out.println(&quot;name=&quot;+name); //System.out.println(&quot;age=&quot;+age); System.out.println(&quot;name =&quot;+name+&quot;, age=&quot;+age); } }注释// - 表示单行注释，从//开始一直到本行末尾的所有内容都是注释 /**/ - 表示多行注释，从/*开始一直到*/之间的所有内容都是注释 注意： 多好注释不允许嵌套使用！数据类型基本分类（记住）在Java语言中将数据类型分为两大类： （1）基本数据类型（记住） byte、short、int、long、float、double、boolean、char 1个 2个 4个 8个 4个 8个 1个 2个 （2）引用数据类型（了解） 数组、类、接口、标注、枚举常用的进制在现实生活中通常采用十进制，逢十进一，十进制的权重：10`0、10`1、... 在计算机的底层采用二进制，逢二进一，二进制权重：2`0、2`1、... 其中二进制的最高位（最左边）代表符号位，若该位时0则表示非负数，若该位是1则表示负数。 如： 10`3 10`2 10`1 10`0 千 百 十 个 1 2 3 4 =&gt;读作：一千两百三十四常用的进制转换（尽量理解、原理）（1）正的十进制转换成二进制的方式 a.除2取余法，让十进制整数不断的除以2并取出余数，直到商为0时将余数逆序排列 b.拆分法，将十进制整数拆分为若干个二进制权重的和，若由该权重下面写1否则写0 如： 45=&gt;32+8+4+1 128 64 32 16 8 4 2 1 0 0 1 0 1 1 0 1 =&gt;0010 1101 （2）正二进制转换为十进制的方式 a.加权法，让二进制中的每个数字乘以当前位的权重在累加起来 如： 0010 1101=&gt;0*2`7+0*2`6+1*2`5+0*2`4+1*2`3+1*2`2+0*2`1+1*2`0 =&gt;0+0+32+0+8+4+0+1 =&gt;45 （3）负十进制转换为二进制的方式 a.先将十进制整数的绝对值转换为二进制，在进行按位取反加1 如： -45 =&gt;绝对值转换为二进制： 0010 1101 =&gt;进行按位取反： 1101 0010 =&gt;再加1： 1101 0011 -45 + 45 =0； -45： 1101 0011 +45： 0010 1101 + ----------------- 1 0000 0000（高位溢出、丢弃，结果是：0） （4）负二进制转换为十进制的方式 a.先减1再进行按位取反，最后合并为十进制整数后增加负号 如： 1101 0011 =&gt;先减一： 1101 0010 =&gt;按位取反： 0010 1101 =&gt;合并十进制： 45 =&gt;添加负号： -45单个字节表示的整数范围（重中之重）在计算机中单个字节表示8位二进制，其中最高位（最左边）代表符号位 若该位是0代表非负数，若该位是1则代表负数，因此单个字节表示的整数范围如下： 非负数的范围： 0000 0000~0111 1111 =&gt;0~2`7-1=&gt;0~127 0111 1111 =&gt;0*128+1*64+1*32+1*16+1*8+1*4+1*2+1*1 =&gt;0+64+32+16+8+4+2+1 =&gt;127 负数的范围： 1000 0000~1111 1111 =&gt; 1000 0000 =&gt;先减1： 0111 1111 =&gt;按位取反： 1000 0000 =&gt;转十进制： 128 =&gt;添加负号： -128 1111 1111 =&gt;先减1： 1111 1110 =&gt;按位取反： 0000 0001 =&gt;转十进制： 1 =&gt;添加负号： -1 综上所述： 计算机中单个字节所能表示的整数范围是：-2`7~2`7-1,也就是-128~127.整数类型在Java语言中用于描述整数数据的数据类型由：byte、short、int、long,推荐int 其中byte类型在内存空间中占1个字节，表示的整数范围是：-2`7~2`7-1 -128~127 其中short类型在内存空间中占2个字节，表示的整数范围是：-2`15~2`15-1 -32768~32767 其中int类型在内存空间中占4个字节，表示的整数范围是：-2`31~2`31-1 正负二十一亿 其中long类型在内存空间中占8个字节，表示的整数范围是：-2`63~2`63-1 比int类型还大的数 在Java程序中直接写出的整数数据叫做 直接量/字面值/常量，如：66，默认为int类型 若希望表达更大的直接量，则需要在直接量的后面加上l或者L，推荐使用L。 扩展： 若希望表达比long类型还大的数据，则借助java.math.BigInteger类型加以描述。浮点类型在Java语言中用于描述小数数据的类型有：float、double，推荐使用double类型 其中float类型在内存空间中占4个字节，叫做单精度浮点数，小数点后通常有效到7位 其中double类型在内存空间中占8个字节，叫做双精度浮点数，小数点后通常有效15位 对于Java程序中直接写出的小数数据来说，叫做直接量/字面值/常量，如：3.14等 而直接量默认为double类型，若希望表达float类型的直接量就需要在直接量的后面加上f或者F都可以。 扩展： 由于Java语言中的float和double类型运算时可能会有误差 若希望实现精确运算则借助java.math.BigDecimal类型加以描述。布尔类型在Java语言中用于描述真假信息的数据类型有：boolean，数值只有：true 和 false 其中boolean类型在内存空间中所占的大小没有明确的规定，通常认为是1个字节 作业1.重点掌握变量输入输出的代码以及单个字节表示的整数范围。 2.思考题：设计一套砝码要求能称量出1 ~ 100g之间的任意重量，请问至少需要多少个砝码？ 以及每个砝码各自的重量是多少(砝码只能放在一侧)？ 3.编程题: 要求用户输入下落时间t(整数)，并按照公式0.5*9.8*t*t来计算下落的位移并打印出来。 其中小数数据使用double类型声明的变量来记录。 4.编程题(选做)：要求提示用户输入一个正整数类型的秒数，拆分为时分秒并打印出来。 + 加法 - 减法 * 乘法 / 除法 % 取余 如：3666 =&gt; 1:1:6","categories":[],"tags":[],"keywords":[]},{"title":"1常用快捷键","slug":"1常用快捷键","date":"2019-09-14T20:24:32.000Z","updated":"2019-09-14T13:07:53.123Z","comments":true,"path":"2019/09/15/1常用快捷键/","link":"","permalink":"https://chensnape.github.io/2019/09/15/1常用快捷键/","excerpt":"","text":"#JavaSE 2019/7/26 9:49:20 ##计算机的体系结构 ###基本概念 计算机俗称“电脑”，是一种呗广泛使用在各个领域的设备。 计算机主要由：硬件 和软件 两部分组成。 ###常件硬件 计算机中常件的硬件有：CPU、内存、硬盘、输入输出设备…. CPU - 中央处理器，是计算机最核心的部件，相当于人的大脑 - 主要用于解析并执行计算机指令以及处理软件中的数据 内存 - 是计算机中的存储部件 - 主要用于临时存放CPU要访问的数据内容，效率比较高 - 容量小且不能永久存储数据，一旦断电会造成数据丢失 - 使用ctrl+s快捷键可以进行数据保存 硬盘 - 是计算机中的存储部件； - 该部件中存储的内容不能被CPU直接访问，若希望访问则需要将数据加载到内存在访问； - 容量大且可以实现永久存储数据，断电后数据不会丢失。 ###科普： 1Tb = 1024Gb 1Gb = 1024Mb 1Mb = 1024Kb 1Kb = 1024byte(字节) 通常一个英文字母占一个字节，一个汉字占两个字节 1byte = 8bit(二进制) 在计算机的底层只识别0和1组成的二进制序列 ###思考： 目前主流的硬盘配置：250G 320G 500G 1Tb等，为啥我的硬盘只有298G呢？ 解析： 硬件厂商在生产硬件时按照1000作为进率，操作系统是按照1024作为进率。 ###常件软件 计算机中常见的软件分为：系统软件 和 应用软件。 其中系统软件主要指操作系统，目前主流的操作系统有： windows系列/Unix系列/linux系列/Android系列/ios系列 其中应用软件主要指安装在操作系统之上的软件，如：QQ、迅雷、… ###计算机的体系结构 使用者 =》应用软件 =》操作系统 =》硬件 =》操作系统分为：外壳（Shell） 和 内核（Kernel） ##Java语言的基本概述（熟悉） ###Java语言的产生背景 Java语言的诞生于1995年，高斯林是公认的Java语言之父，隶属于sun公司，现在隶属于oracle（甲骨文）公司。 Java语言在编程语言排行榜上占据重要的地位。 ###Java语言的版本 （1）JavaSE(Java Platform Standard Edition) - 称之为“Java平台标准版”，主要学校Java语言的语法格式和编程基础 （2）JavaEE(Java Platform Enterprise Edition) - 称之为“Java平台企业版”，主要学习Java项目的后台开发技术 （3）JavaME(Java Platform Micro Edition) - 称之为“Java平台微型版”，随着Android系统的普及走向淘汰 ##开发环境的搭建和使用（重点）***** ###jdk的下载和安装 （1）下载方式 a.从官网直接下载：www.oracle.com/www.sun.com b.从百度/谷歌/搜狗进行搜索下载 （2）安装方式 若下载的是绿色版，则直接解压即可 若下载的是安装版，则一路点击下一步进行安装即可 切记安装路径中不能有中文 ###相关概念 jdk - Java语言开发工具包，只要做Java语言开发就需要下载和安装该软件 jre - Java运行时环境，只要运行Java语言开发的程序就必须安装该软件 javac.exe - Java语言编辑器，负责将高级源代码文件编译成字节码文件 java.exe - Java语言的解释器，负责将字节码文件进行边解释边执行 JVM - Java虚拟机，用于作为Java语言和操作系统之间的桥梁。 ###编写Java程序的流程 （1）新建文本文档，将xxx.txt修改为xxx.java文件； （2）使用即使本的方式打开文件，编写Java语言代码后保存； （3）启动dos窗口。切换到 xxx.java所在目录； （4）使用javac xxx.java进行编译，生产xxx.class的字节码文件； （5）使用java xxx进行解释执行，打印最终结果。 注意： 当文件的后缀无法显示时：组织/工具 =》文件夹和搜索选项 =》查看 =》隐藏已知文件类型的扩展名 =》去掉勾选 =》确定###常用快捷键*** ctrl + s 保存 ctrl + n 新建 ctrl + c 复制 ctrl + v 粘贴 ctrl + x 剪切 ctrl + o 打开 ctrl + z 撤销 ctrl + a 全选 ctrl + f 查找 windows + e 打开计算机 windows + d 回到桌面 windows + l 锁屏 windows + r 打开运行，输入cmd回车可以打开dos窗口 windows + tab 切换任务 alt + tab 切换任务 ctrl + alt + delete 打开任务管理器 ctrl + shift 切换输入法，若切换到中文输入法后就可以使用shift进行中英文切换###常用的dos命令 d: 表示切换到d盘 cd 目录名/路径 表示切换到指定的目录中 dir 表示查看当前目录的内容 cls 表示清屏 cd .. 表示切换到上一级目录 ###环境变量的配置*** （1）基本概念 通常情况下的可执行文件只能在该文件所在的目录中使用，为了使得该可执行文件可以在任意的位置直接使用，此时就需要将Javac所在目录配置到环境变量Path中。 （2）配置方式 计算机 =&gt; 鼠标右击 =&gt; 属性 =&gt; 高级系统设置 =&gt; 高级 =&gt; 环境变量 =&gt; 系统变量 =&gt; 找到Path，点击编辑 =&gt; 将javac.exe所在的路径拷贝到Path变量值的最前面，添加分号 =&gt; 一路点击确定即可 切记Path变量值原来的内容不要改！ 配置环境变量后记得重启dos窗口！ win10系统不需要添加分号！ ###跨平台原理（记住） 由于不同的操作系统中都提供了Java虚拟机，因此可以将同一份字节码文件翻译成不同的 机器指令在不同的系统中执行，从而实现跨平台的效果，赢得了”一次编译，到处使用”的美名。","categories":[],"tags":[],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2019-08-05T11:02:56.622Z","updated":"2019-09-14T10:47:17.137Z","comments":true,"path":"2019/08/05/hello-world/","link":"","permalink":"https://chensnape.github.io/2019/08/05/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}